import r from "../../shared-lib/braze-shared-lib.js";
import { BRAZE_MUST_BE_INITIALIZED_ERROR as P } from "../common/constants.js";
import e from "../managers/braze-instance.js";
import {
  BRAZE_ACTIONS as _,
  getDecodedBrazeAction as O,
} from "../util/braze-actions.js";
import Q from "../util/browser-detector.js";
import { OperatingSystems as V } from "../util/device-constants.js";
import {
  BRAZE_ACTION_URI_REGEX as W,
  isValidBrazeActionJson as X,
} from "../util/validation-utils.js";
import { WindowUtils as Y } from "../util/window-utils.js";
import { getUser as Z } from "./get-user.js";
export function _handleBrazeAction(o, s, t) {
  if (e.rr())
    if (W.test(o)) {
      const s = O(o);
      if (!s) return;
      const t = (o) => {
        if (!X(o))
          return void r.j.error(
            `Decoded Braze Action json is invalid: ${JSON.stringify(
              o,
              null,
              2,
            )}`,
          );
        const s = _.properties.type,
          i = _.properties.me,
          n = _.properties.le,
          a = o[s];
        if (a === _.types.ue) {
          const e = o[i];
          for (const o of e) t(o);
        } else {
          const s = o[n];
          let t, i;
          switch (a) {
            case _.types.logCustomEvent:
              import("./log-custom-event.js").then(
                ({ logCustomEvent: logCustomEvent }) => {
                  e.fe()
                    ? ((i = Array.prototype.slice.call(s)),
                      logCustomEvent(...i))
                    : r.j.error(P);
                },
              );
              break;
            case _.types.requestPushPermission:
              import("../Push/request-push-permission.js").then(
                ({ requestPushPermission: requestPushPermission }) => {
                  e.fe()
                    ? "Safari" === Q.browser && Q.OS === V.de
                      ? window.navigator.standalone && requestPushPermission()
                      : requestPushPermission()
                    : r.j.error(P);
                },
              );
              break;
            case _.types.setEmailNotificationSubscriptionType:
            case _.types.setPushNotificationSubscriptionType:
            case _.types.setCustomUserAttribute:
            case _.types.addToSubscriptionGroup:
            case _.types.removeFromSubscriptionGroup:
            case _.types.addToCustomAttributeArray:
            case _.types.removeFromCustomAttributeArray:
              if (((t = Z()), t)) {
                t[a](...Array.prototype.slice.call(s));
              }
              break;
            case _.types.pe:
            case _.types.je:
              (i = Array.prototype.slice.call(s)), Y.openUri(...i);
              break;
            default:
              r.j.info(`Ignoring unknown Braze Action: ${a}`);
          }
        }
      };
      t(s);
    } else Y.openUri(o, s, t);
}
export function handleBrazeAction(e, o) {
  _handleBrazeAction(e, o);
}

import e from "../managers/braze-instance.js";
import { MAX_PURCHASE_QUANTITY as rr } from "../common/constants.js";
import r from "../../shared-lib/braze-shared-lib.js";
import tt from "../triggers/models/trigger-events.js";
import { TriggersProviderFactory as et } from "../triggers/triggers-provider-factory.js";
import {
  validateCustomProperties as rt,
  validateCustomString as ot,
} from "../util/validation-utils.js";
import s from "../common/event-logger.js";
export function logPurchase(o, i, n, t, D) {
  if (!e.rr()) return !1;
  if (
    (null == n && (n = "USD"), null == t && (t = 1), null == o || o.length <= 0)
  )
    return (
      r.j.error(
        `logPurchase requires a non-empty productId, got "${o}", ignoring.`,
      ),
      !1
    );
  if (!ot(o, "log purchase", "the purchase name")) return !1;
  if (null == i || isNaN(parseFloat(i.toString())))
    return (
      r.j.error(`logPurchase requires a numeric price, got ${i}, ignoring.`), !1
    );
  const a = parseFloat(i.toString()).toFixed(2);
  if (null == t || isNaN(parseInt(t.toString())))
    return (
      r.j.error(
        `logPurchase requires an integer quantity, got ${t}, ignoring.`,
      ),
      !1
    );
  const u = parseInt(t.toString());
  if (u < 1 || u > rr)
    return (
      r.j.error(
        `logPurchase requires a quantity >1 and <${rr}, got ${u}, ignoring.`,
      ),
      !1
    );
  n = null != n ? n.toUpperCase() : n;
  if (
    -1 ===
    [
      "AED",
      "AFN",
      "ALL",
      "AMD",
      "ANG",
      "AOA",
      "ARS",
      "AUD",
      "AWG",
      "AZN",
      "BAM",
      "BBD",
      "BDT",
      "BGN",
      "BHD",
      "BIF",
      "BMD",
      "BND",
      "BOB",
      "BRL",
      "BSD",
      "BTC",
      "BTN",
      "BWP",
      "BYR",
      "BZD",
      "CAD",
      "CDF",
      "CHF",
      "CLF",
      "CLP",
      "CNY",
      "COP",
      "CRC",
      "CUC",
      "CUP",
      "CVE",
      "CZK",
      "DJF",
      "DKK",
      "DOP",
      "DZD",
      "EEK",
      "EGP",
      "ERN",
      "ETB",
      "EUR",
      "FJD",
      "FKP",
      "GBP",
      "GEL",
      "GGP",
      "GHS",
      "GIP",
      "GMD",
      "GNF",
      "GTQ",
      "GYD",
      "HKD",
      "HNL",
      "HRK",
      "HTG",
      "HUF",
      "IDR",
      "ILS",
      "IMP",
      "INR",
      "IQD",
      "IRR",
      "ISK",
      "JEP",
      "JMD",
      "JOD",
      "JPY",
      "KES",
      "KGS",
      "KHR",
      "KMF",
      "KPW",
      "KRW",
      "KWD",
      "KYD",
      "KZT",
      "LAK",
      "LBP",
      "LKR",
      "LRD",
      "LSL",
      "LTL",
      "LVL",
      "LYD",
      "MAD",
      "MDL",
      "MGA",
      "MKD",
      "MMK",
      "MNT",
      "MOP",
      "MRO",
      "MTL",
      "MUR",
      "MVR",
      "MWK",
      "MXN",
      "MYR",
      "MZN",
      "NAD",
      "NGN",
      "NIO",
      "NOK",
      "NPR",
      "NZD",
      "OMR",
      "PAB",
      "PEN",
      "PGK",
      "PHP",
      "PKR",
      "PLN",
      "PYG",
      "QAR",
      "RON",
      "RSD",
      "RUB",
      "RWF",
      "SAR",
      "SBD",
      "SCR",
      "SDG",
      "SEK",
      "SGD",
      "SHP",
      "SLL",
      "SOS",
      "SRD",
      "STD",
      "SVC",
      "SYP",
      "SZL",
      "THB",
      "TJS",
      "TMT",
      "TND",
      "TOP",
      "TRY",
      "TTD",
      "TWD",
      "TZS",
      "UAH",
      "UGX",
      "USD",
      "UYU",
      "UZS",
      "VEF",
      "VND",
      "VUV",
      "WST",
      "XAF",
      "XAG",
      "XAU",
      "XCD",
      "XDR",
      "XOF",
      "XPD",
      "XPF",
      "XPT",
      "YER",
      "ZAR",
      "ZMK",
      "ZMW",
      "ZWL",
    ].indexOf(n)
  )
    return (
      r.j.error(
        `logPurchase requires a valid currencyCode, got ${n}, ignoring.`,
      ),
      !1
    );
  const [g, P] = rt(
    D,
    "logPurchase",
    "purchaseProperties",
    `log purchase "${o}"`,
    "purchase",
  );
  if (!g) return !1;
  const R = e.tr();
  if (R && R.Dr(o))
    return r.j.info(`Purchase "${o}" is blocklisted, ignoring.`), !1;
  const c = s.N(r.q.Pr, { pid: o, c: n, p: a, q: u, pr: P });
  if (c.O) {
    r.j.info(
      `Logged ${u} purchase${u > 1 ? "s" : ""} of "${o}" for ${n} ${a}.`,
    );
    for (const r of c.ve) et.er().be(tt.Rr, [o, D], r);
  }
  return c.O;
}

import e from "../managers/braze-instance.js";
import s from "../common/event-logger.js";
import r from "../../shared-lib/braze-shared-lib.js";
import tt from "../triggers/models/trigger-events.js";
import { TriggersProviderFactory as et } from "../triggers/triggers-provider-factory.js";
import {
  validateCustomProperties as rt,
  validateCustomString as ot,
} from "../util/validation-utils.js";
import { LOG_CUSTOM_EVENT_STRING as nt } from "../common/constants.js";
export function logCustomEvent(t, o) {
  if (!e.rr()) return !1;
  if (null == t || t.length <= 0)
    return (
      r.j.error(
        `logCustomEvent requires a non-empty eventName, got "${t}". Ignoring event.`,
      ),
      !1
    );
  if (!ot(t, "log custom event", "the event name")) return !1;
  const [n, i] = rt(
    o,
    nt,
    "eventProperties",
    `log custom event "${t}"`,
    "event",
  );
  if (!n) return !1;
  const m = e.tr();
  if (m && m.ge(t))
    return r.j.info(`Custom Event "${t}" is blocklisted, ignoring.`), !1;
  const g = s.N(r.q.CustomEvent, { n: t, p: i });
  if (g.O) {
    r.j.info(`Logged custom event "${t}".`);
    for (const e of g.ve) et.er().be(tt.$e, [t, o], e);
  }
  return g.O;
}

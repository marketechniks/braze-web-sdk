import {
  convertMsToSeconds as h,
  dateFromUnixTimestamp as l,
} from "../../util/date-utils.js";
import { FEED_ANIMATION_DURATION as u } from "../../common/constants.js";
import E from "../../managers/subscription-manager.js";
import r from "../../../shared-lib/braze-shared-lib.js";
export default class Card {
  constructor(t, i, s, h, l, n, e, r, u, E, o, T, a, I, N, c) {
    (this.id = t),
      (this.viewed = i),
      (this.title = s),
      (this.imageUrl = h),
      (this.description = l),
      (this.created = n),
      (this.updated = e),
      (this.categories = r),
      (this.expiresAt = u),
      (this.url = E),
      (this.linkText = o),
      (this.aspectRatio = T),
      (this.extras = a),
      (this.pinned = I),
      (this.dismissible = N),
      (this.clicked = c),
      (this.id = t),
      (this.viewed = i || !1),
      (this.title = s || ""),
      (this.imageUrl = h),
      (this.description = l || ""),
      (this.created = n || null),
      (this.updated = e || null),
      (this.categories = r || []),
      (this.expiresAt = u || null),
      (this.url = E),
      (this.linkText = o),
      null == T
        ? (this.aspectRatio = null)
        : ((T = parseFloat(T.toString())),
          (this.aspectRatio = isNaN(T) ? null : T)),
      (this.extras = a || {}),
      (this.pinned = I || !1),
      (this.dismissible = N || !1),
      (this.dismissed = !1),
      (this.clicked = c || !1),
      (this.isControl = !1),
      (this.test = !1),
      (this.Et = null),
      (this.Tt = null);
  }
  subscribeToClickedEvent(t) {
    return this.Nt().It(t);
  }
  subscribeToDismissedEvent(t) {
    return this.St().It(t);
  }
  removeSubscription(t) {
    this.Nt().removeSubscription(t), this.St().removeSubscription(t);
  }
  removeAllSubscriptions() {
    this.Nt().removeAllSubscriptions(), this.St().removeAllSubscriptions();
  }
  dismissCard() {
    if (!this.dismissible || this.dismissed) return;
    "function" == typeof this.logCardDismissal && this.logCardDismissal();
    let t = this._;
    !t && this.id && (t = document.getElementById(this.id)),
      t &&
        ((t.style.height = t.offsetHeight + "px"),
        (t.className = t.className + " ab-hide"),
        setTimeout(function () {
          t &&
            t.parentNode &&
            ((t.style.height = "0"),
            (t.style.margin = "0"),
            setTimeout(function () {
              t && t.parentNode && t.parentNode.removeChild(t);
            }, Card.At));
        }, u));
  }
  Nt() {
    return null == this.Et && (this.Et = new E()), this.Et;
  }
  St() {
    return null == this.Tt && (this.Tt = new E()), this.Tt;
  }
  M() {
    this.viewed = !0;
  }
  p() {
    (this.viewed = !0), (this.clicked = !0), this.Nt().Dt();
  }
  F() {
    return (
      !(!this.dismissible || this.dismissed) &&
      ((this.dismissed = !0), this.St().Dt(), !0)
    );
  }
  Ct(t) {
    if (null == t || t[Card.Rt.rt] !== this.id) return !0;
    if (t[Card.Rt.Lt]) return !1;
    if (
      null != t[Card.Rt.ut] &&
      null != this.updated &&
      parseInt(t[Card.Rt.ut]) < h(this.updated.valueOf())
    )
      return !0;
    if (
      (t[Card.Rt.ot] && !this.viewed && (this.viewed = !0),
      t[Card.Rt.qt] && !this.clicked && (this.clicked = t[Card.Rt.qt]),
      null != t[Card.Rt.ct] && (this.title = t[Card.Rt.ct]),
      null != t[Card.Rt.nt] && (this.imageUrl = t[Card.Rt.nt]),
      null != t[Card.Rt.dt] && (this.description = t[Card.Rt.dt]),
      null != t[Card.Rt.ut])
    ) {
      const i = l(t[Card.Rt.ut]);
      null != i && (this.updated = i);
    }
    if (null != t[Card.Rt.xt]) {
      let i;
      (i = t[Card.Rt.xt] === Card._t ? null : l(t[Card.Rt.xt])),
        (this.expiresAt = i);
    }
    if (
      (null != t[Card.Rt.URL] && (this.url = t[Card.Rt.URL]),
      null != t[Card.Rt.bt] && (this.linkText = t[Card.Rt.bt]),
      null != t[Card.Rt.gt])
    ) {
      const i = parseFloat(t[Card.Rt.gt].toString());
      this.aspectRatio = isNaN(i) ? null : i;
    }
    return (
      null != t[Card.Rt.jt] && (this.extras = t[Card.Rt.jt]),
      null != t[Card.Rt.zt] && (this.pinned = t[Card.Rt.zt]),
      null != t[Card.Rt.kt] && (this.dismissible = t[Card.Rt.kt]),
      null != t[Card.Rt.vt] && (this.test = t[Card.Rt.vt]),
      !0
    );
  }
  tt() {
    r.j.error("Must be implemented in a subclass");
  }
}
(Card._t = -1),
  (Card.Rt = {
    rt: "id",
    ot: "v",
    kt: "db",
    Lt: "r",
    ut: "ca",
    zt: "p",
    xt: "ea",
    jt: "e",
    st: "tp",
    nt: "i",
    ct: "tt",
    dt: "ds",
    URL: "u",
    bt: "dm",
    gt: "ar",
    qt: "cl",
    vt: "t",
  }),
  (Card.et = {
    ht: "captioned_image",
    Ot: "text_announcement",
    Mt: "short_news",
    Pt: "banner_image",
    Ut: "control",
  }),
  (Card.it = {
    rt: "id",
    ot: "v",
    kt: "db",
    lt: "cr",
    ut: "ca",
    zt: "p",
    ft: "t",
    xt: "ea",
    jt: "e",
    st: "tp",
    nt: "i",
    ct: "tt",
    dt: "ds",
    URL: "u",
    bt: "dm",
    gt: "ar",
    qt: "cl",
    vt: "s",
  }),
  (Card.Gt = {
    Xt: "ADVERTISING",
    Vt: "ANNOUNCEMENTS",
    Wt: "NEWS",
    Ft: "SOCIAL",
  }),
  (Card.At = 400);

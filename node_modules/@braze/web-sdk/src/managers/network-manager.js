import qt from "../models/backend-errors.js";
import ue from "../models/braze-event.js";
import {
  convertMsToSeconds as h,
  convertSecondsToMs as Xt,
} from "../util/date-utils.js";
import s from "../common/event-logger.js";
import { isArray as p, isEqual as ii } from "../util/code-utils.js";
import r from "../../shared-lib/braze-shared-lib.js";
import { STORAGE_KEYS as i } from "./storage-manager.js";
import T from "../util/request-header-utils.js";
import { LAST_REQUEST_TO_ENDPOINT_MS_AGO_DEFAULT as Ht } from "../common/constants.js";
export default class Rt {
  constructor(t, e, s, i, r, o, n, h, a, u, c, l) {
    (this.fn = t),
      (this.u = e),
      (this.Mo = s),
      (this.wt = i),
      (this._e = r),
      (this.yt = o),
      (this.cn = n),
      (this.Uo = h),
      (this.jo = a),
      (this.Do = u),
      (this.appVersion = c),
      (this.Xh = l),
      (this.fn = t),
      (this.u = e),
      (this.Mo = s),
      (this.wt = i),
      (this._e = r),
      (this.yt = o),
      (this.cn = n),
      (this.Uo = h),
      (this.jo = a),
      (this.Do = u),
      (this.appVersion = c),
      (this.Xh = l),
      (this.$h = ["npm"]);
  }
  Bs(t, e = !1, s = !1) {
    const r = this.fn.ce(!s),
      o = r.Kr(),
      n = this.u.v(i.k.Fa);
    ii(n, o) || (t.device = o),
      (t.api_key = this.cn),
      (t.time = h(new Date().valueOf(), !0));
    const a = this.u.v(i.k.Kh) || [],
      u = this.u.v(i.k.Wh) || "";
    if (
      (this.$h.length > 0 &&
        (!ii(a, this.$h) || u !== this._e.Yh()) &&
        (t.sdk_metadata = this.$h),
      (t.sdk_version = this.jo),
      this.Do && (t.sdk_flavor = this.Do),
      (t.app_version = this.appVersion),
      (t.app_version_code = this.Xh),
      (t.device_id = r.id),
      e)
    ) {
      const e = this.wt.getUserId();
      null != e && (t.user_id = e);
    }
    return t;
  }
  Zs(t, e, i) {
    const o = e.auth_error,
      n = e.error;
    if (!o && !n) return !0;
    if (o) {
      let e;
      this.Mo.Hh();
      const s = { errorCode: o.error_code };
      for (const t of i)
        p(t) && "X-Braze-Auth-Signature" === t[0] && (s.signature = t[1]);
      t.respond_with && t.respond_with.user_id
        ? (s.userId = t.respond_with.user_id)
        : t.user_id && (s.userId = t.user_id);
      const n = o.reason;
      return (
        n
          ? ((s.reason = n), (e = `due to ${n}`))
          : (e = `with error code ${o.error_code}.`),
        this.Mo.wh() ||
          (e +=
            ' Please use the "enableSdkAuthentication" initialization option to enable authentication.'),
        r.j.error(`SDK Authentication failed ${e}`),
        this.Qh(t.events || [], t.attributes || []),
        this.Mo.Bh(s),
        !1
      );
    }
    if (n) {
      let i,
        o = n;
      switch (o) {
        case qt.Vh:
          return (
            (i = "Received successful response with empty body."),
            s.N(r.q.qs, { e: i }),
            r.j.info(i),
            !1
          );
        case qt.Zh:
          return (
            (i = "Received successful response with invalid JSON"),
            s.N(r.q.qs, { e: i + ": " + e.response }),
            r.j.info(i),
            !1
          );
        case qt.Ra:
          o = `The API key "${t.api_key}" is invalid for the baseUrl ${this.Uo}`;
          break;
        case qt.Xa:
          o =
            "Sorry, we are not currently accepting your requests. If you think this is in error, please contact us.";
          break;
        case qt.Ea:
          o = "No device identifier. Please contact support@braze.com";
      }
      r.j.error("Backend error: " + o);
    }
    return !1;
  }
  Pa(t, e, s, i) {
    return !!((t && 0 !== t.length) || (e && 0 !== e.length) || s || i);
  }
  $a(t, e, s, i, r = !1) {
    const o = [],
      n = (t) => t || "",
      h = n(this.wt.getUserId());
    let a = this.Jr(t, e);
    const u = [],
      c = [];
    let l,
      f = null;
    if (s.length > 0) {
      const t = [];
      for (const e of s) {
        if (((l = e.Kr()), this.Mo.wh())) {
          if (h && !l.user_id) {
            f || (f = {}), f.events || (f.events = []), f.events.push(l);
            continue;
          }
          if (n(l.user_id) !== h) {
            c.push(l);
            continue;
          }
        }
        t.push(l);
      }
      t.length > 0 && (a.events = t);
    }
    if (i.length > 0) {
      const t = [];
      for (const e of i)
        e && (this.Mo.wh() && n(e.user_id) !== h ? u.push(e) : t.push(e));
      t.length > 0 && (a.attributes = t);
    }
    if ((this.Qh(c, u), (a = this.Bs(a, !0, r)), f)) {
      f = this.Bs(f, !1, r);
      const t = { requestData: f, headers: this.Hs(f, T.Os.Na) };
      o.push(t);
    }
    if (a && !this.Pa(a.events, a.attributes, t, e)) return f ? o : null;
    const d = { requestData: a, headers: this.Hs(a, T.Os.Na) };
    return o.push(d), o;
  }
  Qh(t, e) {
    if (t) {
      const e = [];
      for (const s of t) {
        const t = ue.fromJson(s);
        (t.time = Xt(t.time)), e.push(t);
      }
      this.u.bo(e);
    }
    if (e) for (const t of e) this.u.Ha(t);
  }
  ii(t, e) {
    let s = "HTTP error ";
    null != t && (s += t + " "), (s += e), r.j.error(s);
  }
  qr(t) {
    return s.N(r.q.Ka, { n: t });
  }
  Jr(t, e, s) {
    const i = {};
    t && (i.feed = !0), e && (i.triggers = !0);
    const r = null != s ? s : this.wt.getUserId();
    return (
      r && (i.user_id = r),
      (i.config = { config_time: this.yt.li() }),
      { respond_with: i }
    );
  }
  Ua(t) {
    const e = new Date().valueOf();
    let s = Ht.toString();
    const i = T.La(this.u, t);
    if (-1 !== i) {
      s = (e - i).toString();
    }
    return s;
  }
  Hs(t, e, s = !1) {
    const r = [["X-Braze-Api-Key", this.cn]],
      o = this.Ua(e);
    r.push(["X-Braze-Last-Req-Ms-Ago", o]);
    const n = T.Wa(this.u, e).toString();
    r.push(["X-Braze-Req-Attempt", n]);
    let h = !1;
    if (
      (null != t.respond_with &&
        t.respond_with.triggers &&
        (r.push(["X-Braze-TriggersRequest", "true"]), (h = !0)),
      null != t.respond_with &&
        t.respond_with.feed &&
        (r.push(["X-Braze-FeedRequest", "true"]), (h = !0)),
      e === T.Os.Ks)
    ) {
      r.push(["X-Braze-ContentCardsRequest", "true"]);
      let t = this.u.v(i.k.zs);
      (t && s) || ((t = 0), this.u.D(i.k.zs, t)),
        r.push(["BRAZE-SYNC-RETRY-COUNT", t.toString()]),
        (h = !0);
    }
    if (
      (e === T.Os.Si &&
        (r.push(["X-Braze-FeatureFlagsRequest", "true"]), (h = !0)),
      h && r.push(["X-Braze-DataRequest", "true"]),
      this.Mo.wh())
    ) {
      const t = this.Mo.jh();
      null != t && r.push(["X-Braze-Auth-Signature", t]);
    }
    return r;
  }
  Qs(t, e) {
    const s = t.device;
    s && s.os_version instanceof Promise
      ? s.os_version.then((s) => {
          (t.device.os_version = s), e();
        })
      : e();
  }
  ti() {
    this.Mo.ti();
  }
  Ys() {
    return this.Uo;
  }
  addSdkMetadata(t) {
    for (const e of t) -1 === this.$h.indexOf(e) && this.$h.push(e);
  }
}

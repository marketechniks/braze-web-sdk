import { STORAGE_KEYS as i } from "./storage-manager.js";
import E from "./subscription-manager.js";
import Kt from "../models/server-config.js";
import s from "../common/event-logger.js";
import r from "../../shared-lib/braze-shared-lib.js";
import {
  CONTENT_CARDS_RATE_LIMIT_CAPACITY_DEFAULT as Vt,
  CONTENT_CARDS_RATE_LIMIT_REFILL_RATE_DEFAULT as Gt,
} from "../common/constants.js";
export default class jt {
  constructor(t) {
    (this.u = t),
      (this.u = t),
      (this.tl = new E()),
      (this.el = new E()),
      (this.sl = new E()),
      (this.il = null),
      (this.rl = null);
  }
  ll() {
    if (null == this.rl) {
      const t = this.u.v(i.k.hl);
      this.rl = null != t ? Kt.Yn(t) : new Kt();
    }
    return this.rl;
  }
  li() {
    return this.ll().ol;
  }
  ul(t) {
    if (null != t && null != t.config) {
      const e = t.config;
      if (e.time > this.ll().ol) {
        const t = new Kt(
          e.time,
          e.events_blacklist,
          e.attributes_blacklist,
          e.purchases_blacklist,
          e.messaging_session_timeout,
          e.vapid_public_key,
          e.content_cards,
          e.feature_flags,
        );
        let s = !1;
        null != t.al && this.En() !== t.al && (s = !0);
        let r = !1;
        null != t.ml.enabled && this.oi() !== t.ml.enabled && (r = !0);
        let n = !1;
        null != t.gi.enabled && this.yi() !== t.gi.enabled && (n = !0),
          (this.rl = t),
          this.u.D(i.k.hl, t.tt()),
          s && this.tl.Dt(),
          r && this.el.Dt(),
          n && this.sl.Dt();
      }
    }
  }
  Rn(t) {
    const e = this.tl.It(t);
    return this.il && this.tl.removeSubscription(this.il), (this.il = e), e;
  }
  Ps(t) {
    return this.el.It(t);
  }
  Ci(t) {
    return this.sl.It(t);
  }
  ge(t) {
    return -1 !== this.ll().cl.indexOf(t);
  }
  hu(t) {
    return -1 !== this.ll().gl.indexOf(t);
  }
  Dr(t) {
    return -1 !== this.ll().fl.indexOf(t);
  }
  dl() {
    return this.ll().bl;
  }
  En() {
    return this.ll().al;
  }
  oi() {
    return this.ll().ml.enabled || !1;
  }
  $s() {
    const t = this.ll().ml.rate_limit;
    return !(!t || null == t.enabled) && t.enabled;
  }
  di() {
    if (!this.$s()) return -1;
    const t = this.ll().ml.rate_limit;
    return null == t.capacity ? Vt : t.capacity <= 0 ? -1 : t.capacity;
  }
  mi() {
    if (!this.$s()) return -1;
    const t = this.ll().ml.rate_limit;
    return null == t.refill_rate ? Gt : t.refill_rate <= 0 ? -1 : t.refill_rate;
  }
  yi() {
    return this.ll().gi.enabled && null == this.Mi()
      ? (s.N(r.q.qs, { e: "Missing feature flag refresh_rate_limit." }), !1)
      : this.ll().gi.enabled || !1;
  }
  Mi() {
    return this.ll().gi.refresh_rate_limit;
  }
}

import Q from "../util/browser-detector.js";
import xt from "../models/device.js";
import DeviceProperties from "../Core/device-properties.js";
import _t from "../models/identifier.js";
import r from "../../shared-lib/braze-shared-lib.js";
import { STORAGE_KEYS as i } from "../managers/storage-manager.js";
import { values as Pt } from "../util/code-utils.js";
import { getErrorMessage as ei } from "../util/error-utils.js";
export default class Ot {
  constructor(t, e) {
    (this.u = t),
      (this.Qo = e),
      (this.u = t),
      null == e && (e = Pt(DeviceProperties)),
      (this.Qo = e);
  }
  ce(t = !0) {
    let e = this.u.tu(i.eu.Zo);
    null == e && ((e = new _t(r.Z.Y())), t && this.u.uu(i.eu.Zo, e));
    const s = new xt(e.iu);
    for (let t = 0; t < this.Qo.length; t++) {
      switch (this.Qo[t]) {
        case DeviceProperties.BROWSER:
          s.browser = Q.browser;
          break;
        case DeviceProperties.BROWSER_VERSION:
          s.Ia = Q.version;
          break;
        case DeviceProperties.OS:
          s.os = this.Ta();
          break;
        case DeviceProperties.RESOLUTION:
          s.Da = screen.width + "x" + screen.height;
          break;
        case DeviceProperties.LANGUAGE:
          s.language = Q.language;
          break;
        case DeviceProperties.TIME_ZONE:
          s.timeZone = this.Oa(new Date());
          break;
        case DeviceProperties.USER_AGENT:
          s.userAgent = Q.userAgent;
      }
    }
    return s;
  }
  Ta() {
    if (Q.Ca()) return Q.Ca();
    const t = this.u.v(i.k.Fa);
    return t && t.os_version ? t.os_version : Q.Ta();
  }
  Oa(t) {
    let e = !1;
    if ("undefined" != typeof Intl && "function" == typeof Intl.DateTimeFormat)
      try {
        if ("function" == typeof Intl.DateTimeFormat().resolvedOptions) {
          const t = Intl.DateTimeFormat().resolvedOptions().timeZone;
          if (null != t && "" !== t) return t;
        }
      } catch (t) {
        r.j.info(
          "Intl.DateTimeFormat threw an error, cannot detect user's time zone:" +
            ei(t),
        ),
          (e = !0);
      }
    if (e) return "";
    const s = t.getTimezoneOffset();
    return this.Ga(s);
  }
  Ga(t) {
    const e = Math.trunc(t / 60),
      r = Math.trunc(t % 60);
    let s = "GMT";
    return (
      0 !== t &&
        ((s += t < 0 ? "+" : "-"),
        (s +=
          ("00" + Math.abs(e)).slice(-2) +
          ":" +
          ("00" + Math.abs(r)).slice(-2))),
      s
    );
  }
}

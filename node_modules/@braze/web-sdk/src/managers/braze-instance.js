import kt from "./auth-manager.js";
import y from "../common/base-provider.js";
import Q from "../util/browser-detector.js";
import Ot from "./device-manager.js";
import DeviceProperties from "../Core/device-properties.js";
import {
  isArray as p,
  keys as oo,
  validateValueIsFromEnum as G,
  values as Pt,
} from "../util/code-utils.js";
import Rt from "./network-manager.js";
import Lt from "../request-controller.js";
import jt from "./server-config-manager.js";
import Dt from "./session-manager.js";
import r from "../../shared-lib/braze-shared-lib.js";
import J, { STORAGE_KEYS as i } from "./storage-manager.js";
import Mt from "./storage-manager-factory.js";
import E from "./subscription-manager.js";
import { TriggersProviderFactory as et } from "../triggers/triggers-provider-factory.js";
import bt from "../User/user-manager.js";
import { User } from "../User/index.js";
import { parseQueryStringKeyValues as ut } from "../util/url-utils.js";
import { WindowUtils as Y } from "../util/window-utils.js";
import { BRAZE_MUST_BE_INITIALIZED_ERROR as P } from "../common/constants.js";
const L = {
  ho: "allowCrawlerActivity",
  _o: "baseUrl",
  Eo: "noCookies",
  Io: "devicePropertyAllowlist",
  Aa: "disablePushTokenMaintenance",
  Ao: "enableLogging",
  So: "enableSdkAuthentication",
  qa: "manageServiceWorkerExternally",
  No: "minimumIntervalBetweenTriggerActionsInSeconds",
  Oo: "sessionTimeoutInSeconds",
  wo: "appVersion",
  Po: "appVersionNumber",
  _a: "serviceWorkerLocation",
  ka: "safariWebsitePushId",
  Ba: "localization",
  po: "contentSecurityNonce",
  Ro: "allowUserSuppliedJavascript",
  lo: "inAppMessageZIndex",
  fo: "openInAppMessagesInNewTab",
  tn: "openCardsInNewTab",
  en: "openNewsFeedCardsInNewTab",
  mh: "requireExplicitInAppMessageDismissal",
  Co: "doNotLoadFontAwesome",
  Lo: "sdkFlavor",
};
class Bt {
  constructor() {
    (this.cn = ""),
      (this.jo = ""),
      (this.Do = void 0),
      (this.Mo = null),
      (this.fn = null),
      (this.$t = null),
      (this.ki = null),
      (this.yt = null),
      (this._e = null),
      (this.u = null),
      (this.wt = null),
      (this.Uo = ""),
      (this.Bo = !1),
      (this.Wo = !1),
      (this.zo = new E()),
      (this.Vo = new E()),
      (this.options = {}),
      (this.Go = []),
      (this.Ko = []),
      (this.Ve = []),
      (this.jo = "5.0.1");
  }
  $o(t) {
    this.zo.It(t);
  }
  Rh(t) {
    this.Vo.It(t);
  }
  initialize(t, s) {
    if (this.fe())
      return (
        r.j.info("Braze has already been initialized with an API key."), !0
      );
    this.options = s || {};
    let e = this.nn(L.Ao);
    const n = ut(Y.Cn());
    if (
      (n && "true" === n.brazeLogging && (e = !0),
      r.j.init(e),
      r.j.info(
        `Initialization Options: ${JSON.stringify(this.options, null, 2)}`,
      ),
      null == t || "" === t || "string" != typeof t)
    )
      return r.j.error("Braze requires a valid API key to be initialized."), !1;
    this.cn = t;
    let o = this.nn(L._o);
    if (null == o || "" === o || "string" != typeof o)
      return r.j.error("Braze requires a valid baseUrl to be initialized."), !1;
    !1 === /^https?:/.test(o) && (o = `https://${o}`);
    const h = o;
    if (
      ((o = document.createElement("a")),
      (o.href = h),
      "/" === o.pathname && (o = `${o}api/v3`),
      (this.Uo = o.toString()),
      Q.qo && !this.nn(L.ho))
    )
      return (
        r.j.info("Ignoring activity from crawler bot " + navigator.userAgent),
        (this.Wo = !0),
        !1
      );
    const a = this.nn(L.Eo) || !1;
    if (
      ((this.u = Mt.xo(t, a)), a && this.u.Jo(t), new J.ee(null, !0).jr(i.re))
    )
      return (
        r.j.info("Ignoring all activity due to previous opt out"),
        (this.Wo = !0),
        !1
      );
    for (const t of oo(this.options))
      -1 === Pt(r.Yo).indexOf(t) &&
        r.j.warn(`Ignoring unknown initialization option '${t}'.`);
    const l = ["mparticle", "wordpress", "tealium"];
    if (null != this.nn(L.Lo)) {
      const t = this.nn(L.Lo);
      -1 !== l.indexOf(t)
        ? (this.Do = t)
        : r.j.error("Invalid sdk flavor passed: " + t);
    }
    let u = this.nn(r.Yo.Io);
    if (null != u)
      if (p(u)) {
        const t = [];
        for (let i = 0; i < u.length; i++)
          G(
            DeviceProperties,
            u[i],
            "devicePropertyAllowlist contained an invalid value.",
            "DeviceProperties",
          ) && t.push(u[i]);
        u = t;
      } else
        r.j.error(
          "devicePropertyAllowlist must be an array. Defaulting to all properties.",
        ),
          (u = null);
    (this.fn = new Ot(this.u, u)),
      (this.yt = new jt(this.u)),
      (this.wt = new bt(this.yt, this.u)),
      (this._e = new Dt(this.u, this.wt, this.yt, this.nn(L.Oo)));
    const f = new E();
    return (
      (this.Mo = new kt(this.u, this.nn(L.So), f)),
      this.Ht(f),
      (this.$t = new Rt(
        this.fn,
        this.u,
        this.Mo,
        this.wt,
        this._e,
        this.yt,
        this.cn,
        this.Uo,
        this.jo,
        this.Do || "",
        this.nn(L.wo),
        this.nn(L.Po),
      )),
      (this.ki = new Lt(
        this.cn,
        this.Uo,
        this._e,
        this.fn,
        this.wt,
        this.yt,
        this.u,
        (t) => {
          if (this.fe()) for (const i of this.gr()) i.Ss(t);
        },
        this.Mo,
        this.$t,
      )),
      this.ki.initialize(),
      a || this.u.Ho(),
      r.j.info(
        `Initialized for the Braze backend at "${this.nn(
          L._o,
        )}" with API key "${this.cn}".`,
      ),
      et.o(),
      this.yt.Ci(() => {
        this.Bo &&
          this.yt &&
          this.yt.yi() &&
          import("../FeatureFlags/refresh-feature-flags.js").then((t) => {
            if (!this.Bo) return;
            (0, t.default)();
          });
      }),
      this.ki.pr(() => {
        this.Bo &&
          this.yt &&
          this.yt.yi() &&
          import("../FeatureFlags/refresh-feature-flags.js").then((t) => {
            if (!this.Bo) return;
            (0, t.default)(void 0, void 0, !0);
          });
      }),
      this.zo.Dt(this.options),
      (this.Bo = !0),
      !0
    );
  }
  destroy(t) {
    if ((r.j.destroy(), this.fe())) {
      this.Vo.Dt(), this.Vo.removeAllSubscriptions();
      for (const t of this.Go) t.destroy();
      this.Go = [];
      for (const t of this.Ko) t.clearData(!1);
      (this.Ko = []),
        this.removeAllSubscriptions(),
        (this.Ve = []),
        null != this.ki && this.ki.destroy(),
        (this.ki = null),
        (this.Mo = null),
        (this.fn = null),
        (this.$t = null),
        (this.yt = null),
        (this._e = null),
        (this.wt = null),
        (this.options = {}),
        (this.Do = void 0),
        (this.Bo = !1),
        (this.Wo = !1),
        t && (this.u = null);
    }
  }
  rr() {
    return !this.Xo() && (!!this.fe() || (console.warn(P), !1));
  }
  Ma() {
    return this.cn;
  }
  Sr() {
    return this.Mo;
  }
  Ys() {
    return this.Uo;
  }
  te() {
    return this.fn;
  }
  ar() {
    return this.$t;
  }
  nn(t) {
    return this.options[t];
  }
  gr() {
    return this.Ko;
  }
  cr() {
    return this.ki;
  }
  tr() {
    return this.yt;
  }
  aa() {
    return this._e;
  }
  l() {
    return this.u;
  }
  br() {
    if (this.wt && this.ki) return new User(this.wt, this.ki);
  }
  ir() {
    return this.wt;
  }
  nr() {
    return !0 === this.nn(L.Ro);
  }
  g(t) {
    let i = !1;
    for (const s of this.Go) s === t && (i = !0);
    i || this.Go.push(t);
  }
  dr(t) {
    let i = !1;
    for (const s of this.Ko) s.constructor === t.constructor && (i = !0);
    t instanceof y && !i && this.Ko.push(t);
  }
  Ht(t) {
    t instanceof E && this.Ve.push(t);
  }
  removeAllSubscriptions() {
    if (this.rr()) for (const t of this.Ve) t.removeAllSubscriptions();
  }
  removeSubscription(t) {
    if (this.rr()) for (const i of this.Ve) i.removeSubscription(t);
  }
  ne(t) {
    this.Wo = t;
  }
  fe() {
    return this.Bo;
  }
  Xo() {
    return this.Wo;
  }
  As() {
    return this.jo;
  }
}
const e = new Bt();
export { e as default, Bt as BrazeSdkInstance, L as OPTIONS };

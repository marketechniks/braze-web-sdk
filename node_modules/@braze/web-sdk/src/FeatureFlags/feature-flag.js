import r from "../../shared-lib/braze-shared-lib.js";
export default class FeatureFlag {
  constructor(t, r = !1, e = {}, s) {
    (this.id = t),
      (this.enabled = r),
      (this.properties = e),
      (this.trackingString = s),
      (this.id = t),
      (this.enabled = r),
      (this.properties = e),
      (this.trackingString = s);
  }
  getStringProperty(t) {
    const r = this.properties[t];
    return null == r
      ? (this.Er(t), null)
      : this.Ir(r)
      ? r.value
      : (this.Nr("string"), null);
  }
  getNumberProperty(t) {
    const r = this.properties[t];
    return null == r
      ? (this.Er(t), null)
      : this.Tr(r)
      ? r.value
      : (this.Nr("number"), null);
  }
  getBooleanProperty(t) {
    const r = this.properties[t];
    return null == r
      ? (this.Er(t), null)
      : this.Ar(r)
      ? r.value
      : (this.Nr("boolean"), null);
  }
  tt() {
    const t = {};
    return (
      (t[FeatureFlag.it.rt] = this.id),
      (t[FeatureFlag.it.Fe] = this.enabled),
      (t[FeatureFlag.it.we] = this.properties),
      (t[FeatureFlag.it.ze] = this.trackingString),
      t
    );
  }
  Nr(t) {
    r.j.info(`Property is not of type ${t}.`);
  }
  Er(t) {
    r.j.info(`${t} not found in feature flag properties.`);
  }
  Ir(t) {
    return "string" === t.type && "string" == typeof t.value;
  }
  Tr(t) {
    return "number" === t.type && "number" == typeof t.value;
  }
  Ar(t) {
    return "boolean" === t.type && "boolean" == typeof t.value;
  }
}
(FeatureFlag.it = { rt: "id", Fe: "e", we: "pr", ze: "fts" }),
  (FeatureFlag.Rt = { rt: "id", Fe: "enabled", we: "properties", ze: "fts" });

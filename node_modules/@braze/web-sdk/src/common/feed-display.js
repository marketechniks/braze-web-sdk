import x from "./base-feed.js";
import {
  bottomHadImpression as be,
  getCardId as ye,
  impressOnBottom as Fe,
  impressOnTop as Te,
  markCardAsRead as xe,
  topHadImpression as Ee,
} from "../Card/display/card-display.js";
import { bottomIsInView as he, topIsInView as Se } from "../util/dom-utils.js";
import { Card, ControlCard } from "../Card/index.js";
import { cardToHtml as _e } from "../Card/display/card-display.js";
import { isArray as p } from "../util/code-utils.js";
import { KeyCodes as at } from "../util/key-codes.js";
import je from "../l10n/l10n-manager-factory.js";
import { removeSubscription } from "../Core/remove-subscription.js";
import r from "../../shared-lib/braze-shared-lib.js";
import { BRAZE_ACTION_URI_REGEX as W } from "../util/validation-utils.js";
import {
  INELIGIBLE_BRAZE_ACTION_URL_ERROR_TYPES as dt,
  ineligibleBrazeActionURLErrorMessage as ft,
  getDecodedBrazeAction as O,
  containsUnknownBrazeAction as gt,
} from "../util/braze-actions.js";
export const LAST_REQUESTED_REFRESH_DATA_ATTRIBUTE =
  "data-last-requested-refresh";
export const SUBSCRIPTION_ID_DATA_ATTRIBUTE = "data-update-subscription-id";
export const SCROLL_LISTENER_ID = "data-listener-id";
export const scrollListeners = {};
export function destroyFeedHtml(e) {
  e &&
    ((e.className = e.className.replace("ab-show", "ab-hide")),
    setTimeout(() => {
      e && e.parentNode && e.parentNode.removeChild(e);
    }, x.Oh));
  const t = e.getAttribute("data-update-subscription-id");
  null != t && removeSubscription(t);
  const o = e.getAttribute("data-listener-id");
  null != o &&
    (window.removeEventListener("scroll", scrollListeners[o]),
    delete scrollListeners[o]);
}
export function generateFeedBody(e, t) {
  const o = document.createElement("div");
  if (
    ((o.className = "ab-feed-body"),
    o.setAttribute("aria-label", "Feed"),
    o.setAttribute("role", "feed"),
    null == e.lastUpdated)
  ) {
    const e = document.createElement("div");
    e.className = "ab-no-cards-message";
    const t = document.createElement("i");
    (t.className = "fa fa-spinner fa-spin fa-4x ab-initial-spinner"),
      e.appendChild(t),
      o.appendChild(e);
  } else {
    let s = !1;
    const logCardClick = (t) => e.logCardClick(t);
    for (const n of e.cards) {
      const i = n instanceof ControlCard;
      !i || e.ur()
        ? (o.appendChild(_e(n, logCardClick, t)), (s = s || !i))
        : r.j.error(
            "Received a control card for a legacy news feed. Control cards are only supported with content cards.",
          );
    }
    if (!s) {
      const e = document.createElement("div");
      (e.className = "ab-no-cards-message"),
        (e.innerHTML = je.m().get("NO_CARDS_MESSAGE") || ""),
        e.setAttribute("role", "article"),
        o.appendChild(e);
    }
  }
  return o;
}
export function detectFeedImpressions(e, t) {
  if (null != e && null != t) {
    const o = [],
      s = t.querySelectorAll(".ab-card");
    e.yo || (e.yo = {});
    for (let t = 0; t < s.length; t++) {
      const n = ye(s[t]),
        r = Se(s[t]),
        i = he(s[t]);
      if (e.yo[n]) {
        r || i || xe(s[t]);
        continue;
      }
      let a = Ee(s[t]),
        d = be(s[t]);
      const l = a,
        c = d;
      if (
        (!a && r && ((a = !0), Te(s[t])),
        !d && i && ((d = !0), Fe(s[t])),
        a && d)
      ) {
        if (l && c) continue;
        for (const t of e.cards)
          if (t.id === n) {
            (e.yo[t.id] = !0), o.push(t);
            break;
          }
      }
    }
    o.length > 0 && e.logCardImpressions(o);
  }
}
export function refreshFeed(e, t) {
  if (null == e || null == t) return;
  t.setAttribute("aria-busy", "true");
  const o = t.querySelectorAll(".ab-refresh-button")[0];
  null != o && (o.className += " fa-spin");
  const s = new Date().valueOf().toString();
  t.setAttribute("data-last-requested-refresh", s),
    setTimeout(() => {
      if (t.getAttribute("data-last-requested-refresh") === s) {
        const e = t.querySelectorAll(".fa-spin");
        for (let t = 0; t < e.length; t++)
          e[t].className = e[t].className.replace(/fa-spin/g, "");
        const o = t.querySelectorAll(".ab-initial-spinner")[0];
        if (null != o) {
          const e = document.createElement("span");
          (e.innerHTML = je.m().get("FEED_TIMEOUT_MESSAGE") || ""),
            null != o.parentNode &&
              (o.parentNode.appendChild(e), o.parentNode.removeChild(o));
        }
        "true" === t.getAttribute("aria-busy") &&
          t.setAttribute("aria-busy", "false");
      }
    }, x.uo),
    e.sr();
}
export function feedToHtml(e, t, o) {
  const s = document.createElement("div");
  (s.className = "ab-feed ab-hide ab-effect-slide"),
    s.setAttribute("role", "dialog"),
    s.setAttribute("aria-label", "Feed"),
    s.setAttribute("tabindex", "-1");
  const n = document.createElement("div");
  (n.className = "ab-feed-buttons-wrapper"),
    n.setAttribute("role", "group"),
    s.appendChild(n);
  const i = document.createElement("i");
  (i.className = "fa fa-times ab-close-button"),
    i.setAttribute("aria-label", "Close Feed"),
    i.setAttribute("tabindex", "0"),
    i.setAttribute("role", "button");
  const a = (e) => {
    destroyFeedHtml(s), e.stopPropagation();
  };
  i.addEventListener("keydown", (e) => {
    (e.keyCode !== at.Fo && e.keyCode !== at.To) || a(e);
  }),
    (i.onclick = a);
  const d = document.createElement("i");
  (d.className = "fa fa-refresh ab-refresh-button"),
    e && null == e.lastUpdated && (d.className += " fa-spin"),
    d.setAttribute("aria-label", "Refresh Feed"),
    d.setAttribute("tabindex", "0"),
    d.setAttribute("role", "button");
  const l = (t) => {
    refreshFeed(e, s), t.stopPropagation();
  };
  d.addEventListener("keydown", (e) => {
    (e.keyCode !== at.Fo && e.keyCode !== at.To) || l(e);
  }),
    (d.onclick = l),
    n.appendChild(d),
    n.appendChild(i),
    s.appendChild(generateFeedBody(e, t));
  const c = () => detectFeedImpressions(e, s);
  if ((s.addEventListener("scroll", c), !o)) {
    window.addEventListener("scroll", c);
    const e = r.Z.Y();
    (scrollListeners[e] = c), s.setAttribute("data-listener-id", e);
  }
  return s;
}
export function updateFeedCards(e, t, o, s, n) {
  if (!p(t)) return;
  const i = [];
  for (const e of t)
    if (e instanceof Card) {
      if (e.url && W.test(e.url)) {
        const t = O(e.url);
        if (gt(t)) {
          r.j.error(ft(dt._r, "Content Card"));
          continue;
        }
      }
      i.push(e);
    }
  if (((e.cards = i), (e.lastUpdated = o), null != s))
    if ((s.setAttribute("aria-busy", "false"), null == e.lastUpdated))
      destroyFeedHtml(s);
    else {
      const t = s.querySelectorAll(".ab-feed-body")[0];
      if (null != t) {
        const o = generateFeedBody(e, n);
        t.parentNode && t.parentNode.replaceChild(o, t),
          detectFeedImpressions(e, o.parentNode);
      }
    }
}
export function registerFeedSubscriptionId(e, t) {
  e && t.setAttribute("data-update-subscription-id", e);
}

import r from "../../shared-lib/braze-shared-lib.js";
import { getErrorMessage as ei } from "./error-utils.js";
export function _isInView(t, n = !1, e = !1, s = !1) {
  if (null == t) return !1;
  (n = n || !1), (e = e || !1);
  const i = t.getBoundingClientRect();
  return (
    null != i &&
    ((i.top >= 0 &&
      i.top <= (window.innerHeight || document.documentElement.clientHeight)) ||
      !n) &&
    (i.left >= 0 || !s) &&
    ((i.bottom >= 0 &&
      i.bottom <=
        (window.innerHeight || document.documentElement.clientHeight)) ||
      !e) &&
    (i.right <= (window.innerWidth || document.documentElement.clientWidth) ||
      !s)
  );
}
export const DOMUtils = { oc: null, no: _isInView };
export const DIRECTIONS = { Oe: "up", Qe: "down", W: "left", X: "right" };
export function supportsPassive() {
  if (null == DOMUtils.oc) {
    DOMUtils.oc = !1;
    try {
      const t = Object.defineProperty({}, "passive", {
        get: () => {
          DOMUtils.oc = !0;
        },
      });
      window.addEventListener("testPassive", () => {}, t),
        window.removeEventListener("testPassive", () => {}, t);
    } catch (t) {
      r.j.error(ei(t));
    }
  }
  return DOMUtils.oc;
}
export function addPassiveEventListener(t, n, e = () => {}) {
  t.addEventListener(n, e, !!supportsPassive() && { passive: !0 });
}
export function topIsInView(t) {
  return DOMUtils.no(t, !0, !1, !1);
}
export function bottomIsInView(t) {
  return DOMUtils.no(t, !1, !0, !1);
}
export function clickElement(t) {
  if (t.onclick) {
    const n = document.createEvent("MouseEvents");
    n.initEvent("click", !0, !0), t.onclick.apply(t, [n]);
  }
}
export function detectSwipe(t, n, e) {
  let s = null,
    i = null;
  addPassiveEventListener(t, "touchstart", (t) => {
    (s = t.touches[0].clientX), (i = t.touches[0].clientY);
  }),
    addPassiveEventListener(t, "touchmove", (o) => {
      if (null == s || null == i) return;
      const l = s - o.touches[0].clientX,
        r = i - o.touches[0].clientY;
      Math.abs(l) > Math.abs(r) && Math.abs(l) >= 25
        ? (((l > 0 && n === DIRECTIONS.W) || (l < 0 && n === DIRECTIONS.X)) &&
            e(o),
          (s = null),
          (i = null))
        : Math.abs(r) >= 25 &&
          (((r > 0 &&
            n === DIRECTIONS.Oe &&
            t.scrollTop === t.scrollHeight - t.offsetHeight) ||
            (r < 0 && n === DIRECTIONS.Qe && 0 === t.scrollTop)) &&
            e(o),
          (s = null),
          (i = null));
    });
}
export function buildSvg(t, n, e) {
  const s = "http://www.w3.org/2000/svg",
    i = document.createElementNS(s, "svg");
  i.setAttribute("viewBox", t), i.setAttribute("xmlns", s);
  const o = document.createElementNS(s, "path");
  return (
    o.setAttribute("d", n),
    null != e && o.setAttribute("fill", e),
    i.appendChild(o),
    i
  );
}

import r from "../../shared-lib/braze-shared-lib.js";
import qt from "../models/backend-errors.js";
import { getErrorMessage as ei } from "./error-utils.js";
const C = {
  Xs: (t) => {
    let e, o;
    try {
      const s = () => {
        r.j.error("This browser does not have any supported ajax options!");
      };
      let n = !1;
      if ((window.XMLHttpRequest && (n = !0), !n)) return void s();
      e = new XMLHttpRequest();
      const i = () => {
        "function" == typeof t.error && t.error(e.status),
          "function" == typeof t.ei && t.ei(!1);
      };
      (e.onload = () => {
        let o = !1;
        if (4 === e.readyState)
          if (
            ((o = (e.status >= 200 && e.status < 300) || 304 === e.status), o)
          ) {
            if ("function" == typeof t.O) {
              let o, r;
              try {
                (o = JSON.parse(e.responseText)),
                  (r = e.getAllResponseHeaders());
              } catch (o) {
                const s = {
                  error: "" === e.responseText ? qt.Vh : qt.Zh,
                  response: e.responseText,
                };
                (0, t.O)(s, r);
              }
              o && t.O(o, r);
            }
            "function" == typeof t.ei && t.ei(!0);
          } else i();
      }),
        (e.onerror = () => {
          i();
        }),
        (e.ontimeout = () => {
          i();
        }),
        (o = JSON.stringify(t.data)),
        e.open("POST", t.url, !0),
        e.setRequestHeader("Content-type", "application/json"),
        e.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      const f = t.headers || [];
      for (const t of f) e.setRequestHeader(t[0], t[1]);
      e.send(o);
    } catch (t) {
      r.j.error(`Network request error: ${ei(t)}`);
    }
  },
};
export const readResponseHeaders = (t) => {
  const e = {},
    o = t.toString().split("\r\n");
  if (!o) return e;
  let r, s;
  for (const t of o)
    t &&
      ((r = t.slice(0, t.indexOf(":")).toLowerCase().trim()),
      (s = t.slice(t.indexOf(":") + 1).trim()),
      (e[r] = s));
  return e;
};
export default C;

import ni from "./client-hints-parser.js";
import ai from "./user-agent-parser.js";
import { Browsers as oi, OperatingSystems as V } from "./device-constants.js";
class gi {
  constructor() {
    const t = navigator.userAgentData ? ni : ai;
    (this.Sg = new t()),
      (this.userAgent = navigator.userAgent),
      (this.browser = this.Sg.tf()),
      (this.version = this.Sg.ef()),
      (this.OS = null),
      this.Ta().then((t) => (this.OS = t));
    const i = navigator;
    (this.language = (
      i.userLanguage ||
      i.language ||
      i.browserLanguage ||
      i.systemLanguage ||
      ""
    ).toLowerCase()),
      (this.qo = gi.vg(this.userAgent));
  }
  gE() {
    return this.browser === oi.Bg;
  }
  Ca() {
    return this.OS || null;
  }
  Ta() {
    return this.OS
      ? Promise.resolve(this.OS)
      : this.Sg.Ta(gi.Og).then((t) => ((this.OS = t), t));
  }
  static vg(t) {
    t = t.toLowerCase();
    const i = [
      "googlebot",
      "bingbot",
      "slurp",
      "duckduckbot",
      "baiduspider",
      "yandex",
      "facebookexternalhit",
      "sogou",
      "ia_archiver",
      "https://github.com/prerender/prerender",
      "aolbuild",
      "bingpreview",
      "msnbot",
      "adsbot",
      "mediapartners-google",
      "teoma",
    ];
    for (let n = 0; n < i.length; n++) if (-1 !== t.indexOf(i[n])) return !0;
    return !1;
  }
}
gi.Og = [
  { string: navigator.platform, if: "Win", identity: V.Pg },
  { string: navigator.platform, if: "Mac", identity: V.kg },
  { string: navigator.platform, if: "BlackBerry", identity: "BlackBerry" },
  { string: navigator.platform, if: "FreeBSD", identity: "FreeBSD" },
  { string: navigator.platform, if: "OpenBSD", identity: "OpenBSD" },
  { string: navigator.platform, if: "Nintendo", identity: "Nintendo" },
  { string: navigator.platform, if: "SunOS", identity: "SunOS" },
  { string: navigator.platform, if: "PlayStation", identity: "PlayStation" },
  { string: navigator.platform, if: "X11", identity: "X11" },
  {
    string: navigator.userAgent,
    if: ["iPhone", "iPad", "iPod"],
    identity: V.de,
  },
  { string: navigator.platform, if: "Pike v", identity: V.de },
  { string: navigator.userAgent, if: ["Web0S"], identity: "WebOS" },
  {
    string: navigator.platform,
    if: ["Linux armv7l", "Android"],
    identity: V.xg,
  },
  { string: navigator.userAgent, if: ["Android"], identity: V.xg },
  { string: navigator.platform, if: "Linux", identity: "Linux" },
];
const Q = new gi();
export { Q as default, gi as BrowserDetector };

import C from "../util/net.js";
import e from "../managers/braze-instance.js";
import ControlMessage from "./models/control-message.js";
import HtmlMessage from "./models/html-message.js";
import InAppMessage from "./models/in-app-message.js";
import InAppMessageButton from "./models/in-app-message-button.js";
import s from "../common/event-logger.js";
import { newInAppMessageFromJson as lt } from "./in-app-message-factory.js";
import { randomInclusive as D } from "../util/math.js";
import t from "../models/request-result.js";
import r from "../../shared-lib/braze-shared-lib.js";
import E from "../managers/subscription-manager.js";
import pt from "../triggers/models/trigger.js";
import { validateValueIsFromEnum as G } from "../util/code-utils.js";
import { BRAZE_ACTION_URI_REGEX as W } from "../util/validation-utils.js";
import {
  containsPushPrimerBrazeAction as mt,
  containsUnknownBrazeAction as gt,
  getDecodedBrazeAction as O,
  ineligibleBrazeActionURLErrorMessage as ft,
  INELIGIBLE_BRAZE_ACTION_URL_ERROR_TYPES as dt,
} from "../util/braze-actions.js";
import vt from "../Push/utils/push-utils.js";
import T from "../util/request-header-utils.js";
import { STORAGE_KEYS as i } from "../managers/storage-manager.js";
import { FullScreenMessage, ModalMessage, SlideUpMessage } from "./index.js";
export default class aa {
  constructor(t, s, i, r) {
    (this.$t = t),
      (this._e = s),
      (this.u = i),
      (this.wt = r),
      (this.$t = t),
      (this._e = s),
      (this.u = i),
      (this.wt = r),
      (this.Ve = new E()),
      e.Ht(this.Ve),
      (this.We = 1e3),
      (this.Xe = 6e4),
      (this.Ye = null);
  }
  Ze() {
    return this.Ve;
  }
  _i(t) {
    return this.Ve.It(t);
  }
  Pi() {
    return this.Ye;
  }
  Oi(t) {
    this.Ye = t;
  }
  Ji(e, i) {
    if (!e) return new t();
    if (
      !G(
        InAppMessage.Ie,
        i,
        `${i} is not a valid in-app message display failure`,
        "InAppMessage.DisplayFailures",
      )
    )
      return new t();
    const n = { trigger_ids: [e], error_code: i };
    return s.N(r.q.Ki, n);
  }
  N(e, i, n, o) {
    const a = new t();
    let l;
    if (e instanceof ControlMessage) l = { trigger_ids: [e.triggerId] };
    else {
      if (i === r.q.Li || (e instanceof HtmlMessage && i === r.q.Qi)) {
        if (!e.p(o))
          return (
            r.j.info(
              "This in-app message has already received a click. Ignoring analytics event.",
            ),
            a
          );
      } else if (i === r.q.Vi) {
        if (!e.M())
          return (
            r.j.info(
              "This in-app message has already received an impression. Ignoring analytics event.",
            ),
            a
          );
      }
      l = this.Wi(e);
    }
    return null == l ? a : (null != n && (l.bid = n), s.N(i, l));
  }
  Xi(e, i) {
    const n = new t();
    if (!e.p())
      return (
        r.j.info(
          "This in-app message button has already received a click. Ignoring analytics event.",
        ),
        n
      );
    const o = this.Wi(i);
    return null == o
      ? n
      : e.id === InAppMessageButton.Yi
      ? (r.j.info(
          "This in-app message button does not have a tracking id. Not logging event to Braze servers.",
        ),
        n)
      : (null != e.id && (o.bid = e.id), s.N(r.q.Qi, o));
  }
  Zi(t) {
    const e = t.messageFields;
    return (null != e && e.is_push_primer) || !1;
  }
  Mr(t) {
    if (!(t instanceof InAppMessage)) return;
    const e = (t) => {
      if (!t) return;
      const e = O(t);
      return gt(e)
        ? ft(dt._r, "In-App Message")
        : mt(e) && !vt.Gr()
        ? ft(dt.Or, "In-App Message")
        : void 0;
    };
    if (this.Zi(t) && !vt.Gr())
      return "In-App Message contains a push prompt, but is not eligible for a push prompt. Ignoring.";
    const s = t.buttons || [];
    let i;
    for (const t of s)
      if (
        t.clickAction === InAppMessage.ClickAction.URI &&
        t.uri &&
        W.test(t.uri) &&
        ((i = e(t.uri)), i)
      )
        return i;
    return t.clickAction === InAppMessage.ClickAction.URI &&
      t.uri &&
      W.test(t.uri)
      ? e(t.uri)
      : void 0;
  }
  Hr(t, e, s, i) {
    if (!this.$t) return;
    const n = this.$t.Jr(!1, !1),
      o = this.$t.Bs(n);
    (o.template = { trigger_id: t.triggerId, trigger_event_type: e }),
      null != s && (o.template.data = s.Kr());
    const a = this.$t.Hs(o, T.Os.Lr);
    this.$t.Qs(o, () => {
      this.$t &&
        (T.Ws(this.u, T.Os.Lr, new Date().valueOf()),
        C.Xs({
          url: `${this.$t.Ys()}/template/`,
          data: o,
          headers: a,
          O: (e) => {
            if ((T.si(this.u, T.Os.Lr, 1), !this.$t.Zs(o, e, a)))
              return (
                this.Ji(t.triggerId, InAppMessage.Ie.Qr),
                void ("function" == typeof t.Ur && t.Ur())
              );
            if ((this.$t.ti(), null == e || null == e.templated_message))
              return void this.Ji(t.triggerId, InAppMessage.Ie.Qr);
            const s = e.templated_message;
            if (s.type !== pt.Wr.Vr)
              return void this.Ji(t.triggerId, InAppMessage.Ie.Xr);
            const i = lt(s.data);
            if (null == i) return void this.Ji(t.triggerId, InAppMessage.Ie.Xr);
            const n = this.Mr(i);
            if (n)
              return r.j.error(n), void ("function" == typeof t.Ur && t.Ur());
            "function" == typeof t.Yr
              ? t.Yr(i)
              : this.Ji(t.triggerId, InAppMessage.Ie.Qr);
          },
          error: (r) => {
            let n = `getting user personalization for message ${t.triggerId}`;
            if (new Date().valueOf() - t.Zr > t.sn)
              this.Ji(t.triggerId, InAppMessage.Ie.Qr);
            else {
              T.hi(this.u, T.Os.Lr);
              const r = Math.min(t.sn, this.Xe),
                o = this.We;
              null == i && (i = o);
              const a = Math.min(r, D(o, 3 * i));
              (n += `. Retrying in ${a} ms`),
                setTimeout(() => {
                  this.Hr(t, e, s, a);
                }, a);
            }
            this.$t.ii(r, n);
          },
        }));
    });
  }
  Wi(t) {
    if (null == t.triggerId)
      return (
        r.j.info(
          "The in-app message has no analytics id. Not logging event to Braze servers.",
        ),
        null
      );
    const e = {};
    return null != t.triggerId && (e.trigger_ids = [t.triggerId]), e;
  }
  he(t) {
    return (
      !!this.u &&
      !(
        !(t && t instanceof InAppMessage && t.constructor !== InAppMessage) ||
        t instanceof ControlMessage
      ) &&
      this.u.D(i.k.rn, t.tt())
    );
  }
  Re() {
    if (!this.u) return null;
    const t = this.u.v(i.k.rn);
    if (!t) return null;
    let e;
    switch (t.type) {
      case InAppMessage.qe.on:
        e = FullScreenMessage.an(t);
        break;
      case InAppMessage.qe.ln:
      case InAppMessage.qe.Ee:
      case InAppMessage.qe.Ue:
        e = HtmlMessage.an(t);
        break;
      case InAppMessage.qe.un:
      case InAppMessage.qe.Se:
        e = ModalMessage.an(t);
        break;
      case InAppMessage.qe.pn:
        e = SlideUpMessage.an(t);
    }
    return e && this.mn(), e;
  }
  mn() {
    this.u && this.u.ni(i.k.rn);
  }
}

import {
  addPassiveEventListener as oe,
  buildSvg as ae,
  detectSwipe as d,
  DIRECTIONS as c,
} from "../../util/dom-utils.js";
import { createCloseButton as o } from "../../util/component-utils.js";
import { isTransparent as ne, toRgba as ie } from "../../util/color-utils.js";
import FullScreenMessage from "../models/full-screen-message.js";
import HtmlMessage from "../models/html-message.js";
import InAppMessage from "../models/in-app-message.js";
import ModalMessage from "../models/modal-message.js";
import SlideUpMessage from "../models/slide-up-message.js";
import { logInAppMessageClick } from "../log-in-app-message-click.js";
import { _handleBrazeAction as m } from "../../Core/handle-braze-action.js";
import ct from "./html-message-to-html.js";
import le from "./modal-utils.js";
import r from "../../../shared-lib/braze-shared-lib.js";
export default function ce(e, a, t, n, s, i, l, u = document.body) {
  if (((e.ke = document.activeElement), e instanceof HtmlMessage))
    return ct(e, a, t, s, i, l);
  const b = (function (e, a, t, n, s, i, l = document.body) {
    let c = null;
    const d = document.createElement("div");
    (d.className = "ab-in-app-message ab-start-hidden ab-background"),
      i && (d.style.zIndex = (i + 1).toString()),
      e.xe() &&
        ((d.className += " ab-modal-interactions"),
        d.setAttribute("tabindex", "-1")),
      e.Ae() ||
        ((d.style.color = ie(e.textColor)),
        (d.style.backgroundColor = ie(e.backgroundColor)),
        ne(e.backgroundColor) && (d.className += " ab-no-shadow"));
    const u = () => {
        -1 !== d.className.indexOf("ab-start-hidden") &&
          ((d.className = d.className.replace("ab-start-hidden", "")),
          document.querySelectorAll(".ab-iam-img-loading").length > 0
            ? n(
                `Cannot show in-app message ${e.message} because another message is being shown.`,
                InAppMessage.Ie.Le,
              )
            : t(d));
      },
      b = (o = !0) => {
        let a = document.querySelectorAll(".ab-iam-root");
        (a && 0 !== a.length) || (a = l.querySelectorAll(".ab-iam-root")),
          a &&
            a.length > 0 &&
            (a[0].classList.remove("ab-iam-img-loading"),
            c && (clearTimeout(c), (c = null)),
            o
              ? u()
              : r.j.error(
                  `Cannot show in-app message ${e.message} because the image failed to load.`,
                ));
      };
    e.imageStyle === InAppMessage.ImageStyle.GRAPHIC &&
      (d.className += " graphic"),
      e.orientation === InAppMessage.Orientation.LANDSCAPE &&
        (d.className += " landscape"),
      null != e.buttons &&
        0 === e.buttons.length &&
        (e.clickAction !== InAppMessage.ClickAction.NONE &&
          (d.className += " ab-clickable"),
        (d.onclick = (o) => (
          e.ye(d, () => {
            logInAppMessageClick(e),
              e.clickAction === InAppMessage.ClickAction.URI
                ? m(
                    e.uri || "",
                    s || e.openTarget === InAppMessage.OpenTarget.BLANK,
                    o,
                  )
                : e.clickAction === InAppMessage.ClickAction.NEWS_FEED && a();
          }),
          o.stopPropagation(),
          !1
        )));
    const p = o(
      "Close Message",
      e.Ae() ? void 0 : ie(e.closeButtonColor),
      () => {
        e.ye(d);
      },
    );
    d.appendChild(p), i && (p.style.zIndex = (i + 2).toString());
    const g = document.createElement("div");
    g.className = "ab-message-text";
    const f = (e.messageAlignment || e.Te).toLowerCase();
    g.className += " " + f + "-aligned";
    let h = !1;
    const j = document.createElement("div");
    if (((j.className = "ab-image-area"), e.imageUrl)) {
      if (e.cropType === InAppMessage.CropType.CENTER_CROP) {
        const o = document.createElement("span");
        (o.className = "ab-center-cropped-img"),
          (o.style.backgroundImage = "url(" + e.imageUrl + ")"),
          o.setAttribute("role", "img"),
          o.setAttribute("aria-label", "Modal Image"),
          e.Be(o),
          j.appendChild(o);
      } else {
        const o = document.createElement("img");
        if (
          (o.setAttribute("src", e.imageUrl),
          e.Be(o),
          0 === document.querySelectorAll(".ab-iam-img-loading").length)
        ) {
          h = !0;
          const e = document.querySelectorAll(".ab-iam-root");
          e && e.length > 0 && e[0].classList.add("ab-iam-img-loading"),
            (c = window.setTimeout(() => {
              b(!1);
            }, 6e4)),
            (o.onload = () => {
              b();
            }),
            (o.onerror = () => {
              b(!1);
            });
        }
        j.appendChild(o);
      }
      d.appendChild(j), (g.className += " ab-with-image");
    } else if (e.icon) {
      j.className += " ab-icon-area";
      const o = document.createElement("span");
      (o.className = "ab-icon"),
        e.Ae() ||
          ((o.style.backgroundColor = ie(e.iconBackgroundColor)),
          (o.style.color = ie(e.iconColor)));
      const a = document.createElement("i");
      (a.className = "fa"),
        a.appendChild(document.createTextNode(e.icon)),
        a.setAttribute("aria-hidden", "true"),
        o.appendChild(a),
        j.appendChild(o),
        d.appendChild(j),
        (g.className += " ab-with-icon");
    }
    if ((oe(g, "touchstart"), e.header && e.header.length > 0)) {
      const o = document.createElement("h1");
      (o.className = "ab-message-header"), (e.De = r.Z.Y()), (o.id = e.De);
      const a = (
        e.headerAlignment || InAppMessage.TextAlignment.CENTER
      ).toLowerCase();
      (o.className += " " + a + "-aligned"),
        e.Ae() || (o.style.color = ie(e.headerTextColor)),
        o.appendChild(document.createTextNode(e.header)),
        g.appendChild(o);
    }
    return g.appendChild(e.Ge()), d.appendChild(g), h || u(), (e.Me = d), d;
  })(e, a, t, n, s, i, u);
  if (e instanceof FullScreenMessage || e instanceof ModalMessage) {
    const o = e instanceof FullScreenMessage ? "ab-fullscreen" : "ab-modal";
    (b.className += ` ${o} ab-centered`),
      le.He(e, a, b, s),
      le.Je(b),
      le.Ke(e.De, b);
  } else if (e instanceof SlideUpMessage) {
    b.className += " ab-slideup";
    const o = b.getElementsByClassName("ab-close-button")[0];
    if (null != o) {
      const a = ae(
        "0 0 11.38 19.44",
        "M11.38 9.72l-9.33 9.72L0 17.3l7.27-7.58L0 2.14 2.05 0l9.33 9.72z",
        e.Ae() ? void 0 : ie(e.closeButtonColor),
      );
      a.setAttribute("class", "ab-chevron"), o.appendChild(a);
    }
    let a, t;
    d(b, c.W, (e) => {
      (b.className += " ab-swiped-left"),
        null != o && null != o.onclick && o.onclick(e);
    }),
      d(b, c.X, (e) => {
        (b.className += " ab-swiped-right"),
          null != o && null != o.onclick && o.onclick(e);
      }),
      e.slideFrom === InAppMessage.SlideFrom.TOP
        ? ((a = c.Oe), (t = " ab-swiped-up"))
        : ((a = c.Qe), (t = " ab-swiped-down")),
      d(b, a, (e) => {
        (b.className += t), null != o && null != o.onclick && o.onclick(e);
      });
  }
  return b;
}

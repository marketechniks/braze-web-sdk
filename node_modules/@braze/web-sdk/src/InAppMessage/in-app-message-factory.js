import InAppMessage from "./models/in-app-message.js";
import ControlMessage from "./models/control-message.js";
import FullScreenMessage from "./models/full-screen-message.js";
import HtmlMessage from "./models/html-message.js";
import InAppMessageButton from "./models/in-app-message-button.js";
import ModalMessage from "./models/modal-message.js";
import SlideUpMessage from "./models/slide-up-message.js";
import r from "../../shared-lib/braze-shared-lib.js";
export function newInAppMessageFromJson(e) {
  if (!e) return null;
  if (e.is_control) return ControlMessage.fromJson(e);
  let s = e.type;
  null != s && (s = s.toUpperCase());
  const o = e.message,
    n = e.text_align_message,
    m = e.slide_from,
    t = e.extras,
    l = e.trigger_id,
    i = e.click_action,
    f = e.uri,
    p = e.open_target,
    a = e.message_close,
    u = e.duration,
    d = e.icon,
    g = e.image_url,
    c = e.image_style,
    j = e.icon_color,
    w = e.icon_bg_color,
    b = e.bg_color,
    h = e.text_color,
    v = e.close_btn_color,
    I = e.header,
    x = e.text_align_header,
    z = e.header_text_color,
    A = e.frame_color,
    F = [];
  let M = e.btns;
  null == M && (M = []);
  for (let e = 0; e < M.length; e++) F.push(InAppMessageButton.fromJson(M[e]));
  const k = e.crop_type,
    y = e.orientation,
    J = e.animate_in,
    S = e.animate_out;
  let q,
    B = e.html_id,
    C = e.css;
  if (
    ((null != B && "" !== B && null != C && "" !== C) ||
      ((B = void 0), (C = void 0)),
    s === ModalMessage.et || s === InAppMessage.qe.Se)
  )
    q = new ModalMessage(
      o,
      n,
      t,
      l,
      i,
      f,
      p,
      a,
      u,
      d,
      g,
      c,
      j,
      w,
      b,
      h,
      v,
      J,
      S,
      I,
      x,
      z,
      A,
      F,
      k,
      B,
      C,
    );
  else if (s === FullScreenMessage.et)
    q = new FullScreenMessage(
      o,
      n,
      t,
      l,
      i,
      f,
      p,
      a,
      u,
      d,
      g,
      c,
      j,
      w,
      b,
      h,
      v,
      J,
      S,
      I,
      x,
      z,
      A,
      F,
      k,
      y,
      B,
      C,
    );
  else if (s === SlideUpMessage.et)
    q = new SlideUpMessage(
      o,
      n,
      m,
      t,
      l,
      i,
      f,
      p,
      a,
      u,
      d,
      g,
      j,
      w,
      b,
      h,
      v,
      J,
      S,
      B,
      C,
    );
  else {
    if (
      s !== HtmlMessage.et &&
      s !== InAppMessage.qe.Ee &&
      s !== InAppMessage.qe.Ue
    )
      return void r.j.error("Ignoring message with unknown type " + s);
    {
      const s = e.message_fields;
      (q = new HtmlMessage(o, t, l, a, u, J, S, A, B, C, s)),
        (q.trusted = e.trusted || !1);
    }
  }
  return (q.Pe = s), q;
}
export function buttonsFromSerializedInAppMessage(e) {
  const s = [];
  for (const o of e)
    s.push(
      new InAppMessageButton(
        o.text,
        o.backgroundColor,
        o.textColor,
        o.borderColor,
        o.clickAction,
        o.uri,
        o.id,
      ),
    );
  return s;
}

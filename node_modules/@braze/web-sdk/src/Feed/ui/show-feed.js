import e, { OPTIONS as L } from "../../managers/braze-instance.js";
import {
  destroyFeedHtml as z,
  detectFeedImpressions as q,
  feedToHtml as I,
  LAST_REQUESTED_REFRESH_DATA_ATTRIBUTE as M,
  refreshFeed as $,
  registerFeedSubscriptionId as k,
  updateFeedCards as A,
} from "../../common/feed-display.js";
import { Feed, logFeedDisplayed, subscribeToFeedUpdates } from "../index.js";
import re from "../feed-provider-factory.js";
import { intersection as te } from "../../util/code-utils.js";
import { setCardHeight as B } from "../../Card/display/card-display.js";
import { setupFeedUI as F } from "../../ui/js/index.js";
import r from "../../../shared-lib/braze-shared-lib.js";
export function showFeed(t, n, o) {
  if (!e.rr()) return;
  F();
  const s = (e, t) => {
      if (null == t) return e;
      const n = [];
      for (let e = 0; e < t.length; e++) n.push(t[e].toLowerCase());
      const o = [];
      for (let t = 0; t < e.length; t++) {
        const r = [],
          s = e[t].categories || [];
        for (let e = 0; e < s.length; e++) r.push(s[e].toLowerCase());
        te(r, n).length > 0 && o.push(e[t]);
      }
      return o;
    },
    i = e.nn(L.tn) || e.nn(L.en) || !1;
  let l = !1;
  null == t && ((t = document.body), (l = !0));
  let a,
    f = !1;
  null == n
    ? ((a = re.er().Hi()),
      A(a, s(a.cards, o), a.lastUpdated, null, i),
      (f = !0))
    : (a = new Feed(s(n, o), new Date()));
  const u = I(a, i, l);
  if (f) {
    (null == a.lastUpdated ||
      new Date().valueOf() - a.lastUpdated.valueOf() > Feed.mr) &&
      (r.j.info(
        `Cached feed was older than max TTL of ${Feed.mr} ms, requesting an update from the server.`,
      ),
      $(a, u));
    const e = new Date().valueOf(),
      t = subscribeToFeedUpdates(function (t) {
        const n = u.querySelectorAll(".ab-refresh-button")[0];
        if (null != n) {
          let t = 500;
          t -= new Date().valueOf() - e;
          const o = u.getAttribute(M);
          if (o) {
            const e = parseInt(o);
            isNaN(e) || (t -= new Date().valueOf() - e);
          }
          setTimeout(
            function () {
              n.className = n.className.replace(/fa-spin/g, "");
            },
            Math.max(t, 0),
          );
        }
        A(a, s(t.cards, o), t.lastUpdated, u, i);
      });
    k(t, u);
  }
  const d = (e) => {
    const t = e.querySelectorAll(".ab-feed");
    let n = null;
    for (let o = 0; o < t.length; o++) t[o].parentNode === e && (n = t[o]);
    null != n
      ? (z(n), n.parentNode && n.parentNode.replaceChild(u, n))
      : e.appendChild(u),
      setTimeout(function () {
        u.className = u.className.replace("ab-hide", "ab-show");
      }, 0),
      l && u.focus(),
      logFeedDisplayed(),
      q(a, u),
      a && B(a.cards, e);
  };
  var m;
  null != t
    ? d(t)
    : (window.onload =
        ((m = window.onload),
        function () {
          "function" == typeof m && m(new Event("oldLoad")), d(document.body);
        }));
}

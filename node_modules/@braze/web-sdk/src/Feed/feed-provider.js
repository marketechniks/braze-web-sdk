import y from "../common/base-provider.js";
import e from "../managers/braze-instance.js";
import Feed from "./feed.js";
import {
  newCardFromFeedJson as ht,
  newCardFromSerializedValue as R,
} from "../Card/util/card-factory.js";
import { rehydrateDateAfterJsonization as w } from "../util/date-utils.js";
import { STORAGE_KEYS as i } from "../managers/storage-manager.js";
import E from "../managers/subscription-manager.js";
export default class ee extends y {
  constructor(t, s) {
    super(),
      (this.u = t),
      (this.ki = s),
      (this.cards = []),
      (this.Ai = null),
      (this.u = t),
      (this.ki = s),
      (this.Bt = new E()),
      e.Ht(this.Bt),
      this.Yt();
  }
  Yt() {
    let t = [];
    this.u && (t = this.u.v(i.k.Bi) || []);
    const s = [];
    for (let i = 0; i < t.length; i++) {
      const e = R(t[i]);
      null != e && s.push(e);
    }
    (this.cards = s), this.u && (this.Ai = w(this.u.v(i.k.Ei)));
  }
  Gi(t) {
    const s = [];
    let e = null,
      r = {};
    this.u && (r = this.u.v(i.k.L) || {});
    const h = {};
    for (let i = 0; i < t.length; i++) {
      e = t[i];
      const o = ht(e);
      if (null != o) {
        const t = o.id;
        t && r[t] && ((o.viewed = !0), (h[t] = !0)), s.push(o);
      }
    }
    (this.cards = s),
      this.Ds(),
      (this.Ai = new Date()),
      this.u && (this.u.D(i.k.L, h), this.u.D(i.k.Ei, this.Ai));
  }
  Ds() {
    if (!this.u) return;
    const t = [];
    for (let s = 0; s < this.cards.length; s++) t.push(this.cards[s].tt());
    this.u.D(i.k.Bi, t);
  }
  Ss(t) {
    null != t &&
      t.feed &&
      (this.Yt(),
      this.Gi(t.feed),
      this.Bt.Dt(new Feed(this.cards.slice(), this.Ai)));
  }
  Hi() {
    this.Yt();
    const t = [],
      s = new Date();
    for (let i = 0; i < this.cards.length; i++) {
      const e = this.cards[i].expiresAt;
      let r = !0;
      null != e && (r = e >= s), r && t.push(this.cards[i]);
    }
    return new Feed(t, this.Ai);
  }
  xs() {
    this.ki && this.ki.requestFeedRefresh();
  }
  ri(t) {
    return this.Bt.It(t);
  }
  clearData(t) {
    null == t && (t = !1),
      (this.cards = []),
      (this.Ai = null),
      t && this.u && (this.u.ni(i.k.Bi), this.u.ni(i.k.Ei)),
      this.Bt.Dt(new Feed(this.cards.slice(), this.Ai));
  }
}
